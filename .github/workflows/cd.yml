name: CD

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ghcr.io/ihasidul/padre-ginos-pizza-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/ihasidul/padre-ginos-pizza-frontend:latest
          no-cache: true

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: adminuser
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /opt/app
            sudo git pull 
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            # Stop all services
            sudo docker compose -f /opt/app/docker-compose.prod.yml down

            # Remove the frontend volume to force refresh
            sudo docker volume rm app_frontend-dist || true

            # Pull latest images
            sudo docker compose -f /opt/app/docker-compose.prod.yml pull

            # Start services
            sudo docker compose -f /opt/app/docker-compose.prod.yml up -d --remove-orphans

            # Wait for frontend-builder to complete
            echo "Waiting for frontend-builder to complete..."
            sleep 15

            # Check frontend-builder logs
            echo "Frontend-builder logs:"
            sudo docker compose -f /opt/app/docker-compose.prod.yml logs frontend-builder

            # Check if files were copied
            echo "Checking frontend volume contents:"
            sudo docker run --rm -v app_frontend-dist:/data alpine ls -la /data

            # Restart nginx to ensure it picks up new files
            sudo docker compose -f /opt/app/docker-compose.prod.yml restart nginx

            # Final verification
            echo "Final check - nginx html folder:"
            sudo docker compose -f /opt/app/docker-compose.prod.yml exec nginx ls -la /usr/share/nginx/html

            # Cleanup
            sudo docker image prune -f
